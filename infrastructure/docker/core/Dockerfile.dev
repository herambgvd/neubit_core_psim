# Multi-stage Dockerfile for Neubit PSIM Core Platform Service
# This Dockerfile creates optimized images for different environments
# with proper security, performance, and development considerations

# Base Python image with security updates
FROM python:3.11-slim-bullseye as base

# Set environment variables for Python optimization
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    POETRY_VERSION=1.6.1

# Install system dependencies and security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build dependencies
    build-essential \
    # PostgreSQL client and development libraries
    postgresql-client \
    libpq-dev \
    # SSL/TLS support
    ca-certificates \
    # Networking tools
    curl \
    wget \
    # Image processing libraries
    libjpeg-dev \
    libpng-dev \
    # System utilities
    vim \
    less \
    # Git for version control
    git \
    # Process monitoring
    htop \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd --gid 1000 appuser \
    && useradd --uid 1000 --gid appuser --shell /bin/bash --create-home appuser

# Set working directory
WORKDIR /app

# Create necessary directories
RUN mkdir -p /app/logs /app/media /app/static /app/tmp \
    && chown -R appuser:appuser /app

# Development stage
FROM base as development

# Install development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Development tools
    iputils-ping \
    telnet \
    netcat \
    # Code quality tools
    shellcheck \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements files
COPY requirements/ /app/requirements/

# Install Python dependencies
RUN pip install --upgrade pip setuptools wheel \
    && pip install -r requirements/dev.txt

# Copy project files with proper ownership
COPY --chown=appuser:appuser . /app/

# Switch to non-root user
USER appuser

# Set Python path to include src directory
ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Create development database migration script
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Waiting for database to be ready..."\n\
until pg_isready -h ${DB_HOST:-postgres} -p ${DB_PORT:-5432} -U ${DB_USER:-postgres}; do\n\
  echo "Database is unavailable - sleeping"\n\
  sleep 1\n\
done\n\
echo "Database is ready!"\n\
cd /app/src\n\
python manage.py migrate\n\
python manage.py collectstatic --noinput\n\
exec "$@"' > /app/entrypoint.sh \
    && chmod +x /app/entrypoint.sh

# Health check for development
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Expose port
EXPOSE 8000

# Default command for development
CMD ["python", "src/manage.py", "runserver", "0.0.0.0:8000"]

# Production stage
FROM base as production

# Install only production system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Process supervisor
    supervisor \
    # Nginx for static file serving
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements files
COPY requirements/base.txt /app/requirements/

# Install only production Python dependencies
RUN pip install --upgrade pip setuptools wheel \
    && pip install -r requirements/base.txt \
    && pip install gunicorn[gevent]==21.2.0

# Copy project files
COPY --chown=appuser:appuser src/ /app/src/
COPY --chown=appuser:appuser infrastructure/docker/core/nginx.conf /etc/nginx/nginx.conf
COPY --chown=appuser:appuser infrastructure/docker/core/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY --chown=appuser:appuser infrastructure/docker/core/gunicorn.conf.py /app/gunicorn.conf.py

# Set Python path
ENV PYTHONPATH="/app/src:$PYTHONPATH"

# Create production entrypoint
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Starting production setup..."\n\
cd /app/src\n\
# Collect static files\n\
python manage.py collectstatic --noinput\n\
# Run database migrations\n\
python manage.py migrate\n\
# Start supervisor\n\
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf' > /app/entrypoint-prod.sh \
    && chmod +x /app/entrypoint-prod.sh

# Switch to non-root user
USER appuser

# Health check for production
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Expose ports
EXPOSE 8000 80

# Production command
CMD ["/app/entrypoint-prod.sh"]

# Testing stage
FROM development as testing

# Install additional testing dependencies
USER root
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Browser testing dependencies
    chromium \
    chromium-driver \
    # Load testing tools
    apache2-utils \
    && rm -rf /var/lib/apt/lists/*

# Install additional Python testing tools
RUN pip install pytest-xvfb pytest-selenium coverage[toml]

# Switch back to app user
USER appuser

# Set testing environment variables
ENV DJANGO_SETTINGS_MODULE=core.settings.testing \
    COVERAGE_PROCESS_START=/app/.coveragerc

# Create test entrypoint
RUN echo '#!/bin/bash\n\
set -e\n\
cd /app/src\n\
echo "Running tests with coverage..."\n\
coverage run --source="." manage.py test\n\
coverage report\n\
coverage html\n\
echo "Tests completed!"' > /app/run-tests.sh \
    && chmod +x /app/run-tests.sh

# Default command for testing
CMD ["/app/run-tests.sh"]